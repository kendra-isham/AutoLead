{"ast":null,"code":"var _jsxFileName = \"/home/kendra/Desktop/modembot/client/src/App.js\";\n// dependancies \n//useEffect assists in creating session upon refresh\nimport React, { useEffect } from 'react';\nimport './App.css'; // redux\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\"; // chat component\n\nimport Chat from \"./components/chat/Chat\";\nimport { createSession } from \"./actions/watson\";\nimport axios from \"axios\"; //checks to see if there's already a session\n//if there is, delete session_id and set a new one\n\nif (localStorage.session) {\n  delete axios.defaults.headers.common[\"session_id\"];\n  axios.defaults.headers.common[\"session_id\"] = localStorage.session;\n} else {\n  delete axios.defaults.headers.common[\"session_id\"];\n} // connect app to redux \n\n\nconst App = () => {\n  //creates session\n  useEffect(() => {\n    if (!localStorage.session) {\n      store.dispatch(createSession());\n    } else {\n      console.log(\"local storage exists\");\n    }\n  });\n  return /*#__PURE__*/React.createElement(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Chat, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }), console.log(\"in app.js\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/kendra/Desktop/modembot/client/src/App.js"],"names":["React","useEffect","Provider","store","Chat","createSession","axios","localStorage","session","defaults","headers","common","App","dispatch","console","log"],"mappings":";AAAA;AACE;AACF,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP,C,CACI;;AACJ,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACI;;AACJ,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AACA,IAAIC,YAAY,CAACC,OAAjB,EAA0B;AACxB,SAAOF,KAAK,CAACG,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,YAA9B,CAAP;AACAL,EAAAA,KAAK,CAACG,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,YAA9B,IAA8CJ,YAAY,CAACC,OAA3D;AACD,CAHD,MAGO;AACL,SAAOF,KAAK,CAACG,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,YAA9B,CAAP;AACD,C,CAED;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAEhB;AACAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAG,CAACM,YAAY,CAACC,OAAjB,EAAyB;AACvBL,MAAAA,KAAK,CAACU,QAAN,CAAeR,aAAa,EAA5B;AACD,KAFD,MAEK;AACHS,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD;AACF,GANQ,CAAT;AASA,sBACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEZ,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEMW,OAAO,CAACC,GAAR,CAAY,WAAZ,CAFN,CADF,CADF;AAQD,CApBD;;AAsBA,eAAeH,GAAf","sourcesContent":["// dependancies \n  //useEffect assists in creating session upon refresh\nimport React, { useEffect } from 'react';\nimport './App.css';\n    // redux\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n    // chat component\nimport Chat from \"./components/chat/Chat\";\nimport { createSession } from \"./actions/watson\";\nimport axios from \"axios\";\n\n//checks to see if there's already a session\n//if there is, delete session_id and set a new one\nif (localStorage.session) {\n  delete axios.defaults.headers.common[\"session_id\"];\n  axios.defaults.headers.common[\"session_id\"] = localStorage.session;\n} else {\n  delete axios.defaults.headers.common[\"session_id\"];\n}\n\n// connect app to redux \nconst App = () => {\n\n  //creates session\n  useEffect(() => {\n    if(!localStorage.session){\n      store.dispatch(createSession());\n    }else{\n      console.log(\"local storage exists\")\n    }\n  });\n\n\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n          <Chat />\n           {console.log(\"in app.js\")}\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}